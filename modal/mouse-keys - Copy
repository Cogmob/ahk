#Include %A_ScriptDir%\modal\mousejump

global moveMouseThreads := 0


ActivateMouse() {
    mousejumpActivate()
    Hotkey, +a, MouseKeys
    Hotkey, +~, MouseKeys
    Hotkey, +z, MouseKeys
    Hotkey, +x, MouseKeys
    Hotkey, +s, MouseKeys
    Hotkey, +d, WheelUpFunc
    Hotkey, +c, WheelDownFunc
    Hotkey, +Space, MouseKeys
    Hotkey, +a, On
    Hotkey, +~, On
    Hotkey, +z, On
    Hotkey, +x, On
    Hotkey, +s, On
    Hotkey, +d, On
    Hotkey, +c, On
    Hotkey, +Space, On

    Hotkey, ^a, MouseKeys
    Hotkey, ^\, MouseKeys
    Hotkey, ^z, MouseKeys
    Hotkey, ^x, MouseKeys
    Hotkey, ^s, MouseKeys
    Hotkey, ^d, WheelUpFunc
    Hotkey, ^c, WheelDownFunc
    Hotkey, ^Space, MouseKeys
    Hotkey, ^a, On
    Hotkey, ^\, On
    Hotkey, ^z, On
    Hotkey, ^x, On
    Hotkey, ^s, On
    Hotkey, ^d, On
    Hotkey, ^c, On
    Hotkey, ^Space, On
}


DeactivateMouse() {
    mousejumpDeactivate()
    Hotkey, +a, Off
    Hotkey, +~, Off
    Hotkey, +z, Off
    Hotkey, +x, Off
    Hotkey, +s, Off
    Hotkey, +d, Off
    Hotkey, +c, Off
    Hotkey, +Space, Off

    Hotkey, ^a, Off
    Hotkey, ^\, Off
    Hotkey, ^z, Off
    Hotkey, ^x, Off
    Hotkey, ^s, Off
    Hotkey, ^d, Off
    Hotkey, ^c, Off
    Hotkey, ^Space, Off
}


MouseKeys() {
    if (!GetLock()) {
        Return
    }

    Send {Shift Up}
    mouseMoveData := { speed: 2 }
    mouseClickData := { wasClicked: false }
    mouseRightClickData := { wasClicked: false }
    timeoutData := { time: 10000 }
    ownerGuiData := { time: 1000 }

    Loop {
        mouseMoveData := MouseMove(mouseMoveData)
        mouseClickData := MouseClick(mouseClickData)
        mouseRightClickData := MouseRightClick(mouseRightClickData)
        timeoutData := TimeoutNoAction(timeoutData)
        If (!(GetKeyState("LShift","D") or GetKeyState("LCtrl","D"))) {
            break
        }
    }

    ReleaseLock()
}


SetOwnerGui(data) {
    data.time := data.time - 1
    if (data.time > 0) {
        return data
    }
    data.time := 1000
	hwnd := WinExist("A")
	WinGetPos, winPosX, winPosY, winSizeX, winSizeY, A
	winParamX = x%winPosX%
	winParamY = y%winPosY%
	Gui, MyGui:+Owner%hwnd%
	Gui, MyGui:show, %winParamX% %winParamY%
    return data
}


TimeoutNoAction(timeoutData) {
	data.time := data.time - 1
	if (GetKeyState("LControl","D") or GetKeyState("LShift","D") or GetKeyState("q") or GetKeyState("w") or GetKeyState("e") or GetKeyState("r") or GetKeyState("t") or GetKeyState("y") or GetKeyState("u") or GetKeyState("i") or GetKeyState("o") or GetKeyState("p") or GetKeyState("a") or GetKeyState("s") or GetKeyState("d") or GetKeyState("f") or GetKeyState("g") or GetKeyState("h") or GetKeyState("j") or GetKeyState("k") or GetKeyState("l") or GetKeyState(";") or GetKeyState("z") or GetKeyState("x") or GetKeyState("c") or GetKeyState("v") or GetKeyState("b") or GetKeyState("n") or GetKeyState("m") or GetKeyState(",") or GetKeyState(".") or GetKeyState("1") or GetKeyState("2") or GetKeyState("3") or GetKeyState("4") or GetKeyState("5") or GetKeyState("6") or GetKeyState("7") or GetKeyState("8") or GetKeyState("9") or GetKeyState("0") or GetKeyState("Capslock") or GetKeyState("SC029")) {
	    data.time := 10000
	}
	return data
}


MouseMove(data) {
    directionVector := GetDirectionVector()
    speedMultiplier := GetSpeedMultiplier(directionVector)

    if (speedMultiplier > 0) {
        data.speed := data.speed+0.5
    } else {
        data.speed := data.speed-0.5
    }
    data.speed := Limit(data.speed, 2, 25)

    xMov := directionVector.x * data.speed * speedMultiplier
    yMov := -directionVector.y * data.speed * speedMultiplier
    MouseMove, %xMov%, %yMov%, 0, R
	
	return data
}


Limit(in, low, high) {
	if (in < low) {
	    return low
	} else if (in > high) {
	    return high
	} else {
	    return in
	}
}


MouseRightClick(data) {
    if (GetKeyState("S","D") != data.wasClicked) {
        if (data.wasClicked) {
            click right up
        } else {
            click right down
        }
    }
    data.wasClicked := GetKeyState("S","D")

    return data
}


MouseClick(data) {
    if ((GetKeyState("W","D") or GetKeyState("Space","D")) != data.wasClicked) {
        if (data.wasClicked) {
            click up
        } else {
            click down
        }
    }
    data.wasClicked := (GetKeyState("W","D") or GetKeyState("Space","D"))

    return data
}


GetLock() {
    mode := "not moving"
    if (moveMouseThreads == 0) {
	    moveMouseThreads := moveMouseThreads+1
	    return moveMouseThreads == 1 ? true : false
    }
    return false
}


ReleaseLock() {
    moveMouseThreads := moveMouseThreads-1
}


GetDirectionVector() {
    x = 0
    y = 0

    If (GetKeyState("~","D")) {
        x := x-1
    }
    If (GetKeyState("X","D")) {
        x := x+1
    }
    If (GetKeyState("Z","D")) {
        y := y-1
    }
    If (GetKeyState("A","D")) {
        y := y+1
    }

    return {x:x, y:y}
}


GetSpeedMultiplier(vector) {
    x := Abs(vector.x)
    y := Abs(vector.y)
    if (x+y == 0) {
        return 0
    }
    if (x+y == 1) {
        return 1
    }
    if (x+y == 2) {
        return Sqrt(2)
    }
    MsgBox Unexpected speed multiplier
}


WheelUpFunc() {
	Send, {WheelUp}
}

WheelDownFunc() {
	Send, {WheelDown}
}